You may use TAU to identify the location of a program crash. 

First compile and run without TAU:
% make
% mxterm 1 4 40
% mpirun -np 4  ./foo
It crashes. 
% export TAU_TRACK_SIGNALS=1
% mpirun -np 4 tau_exec ./foo
-bash-4.1$ paraprof -d | more

-bash-4.1$ cat -n foo.c | grep 17
    17	  y = t->next->id;
-bash-4.1$ paraprof -d 
...
Creating TAU Profile data...
Metadata:
BACKTRACE(1)   1            : [addr=<0x2aaaad0b9960>] [/lib64/libc-2.12.so:0] [/lib64/libc-2.12.so]
BACKTRACE(1)   2            : [bar] [/g/g24/shende1/workshop/debug/foo.c:18] [/g/g24/shende1/workshop/debug/foo]
BACKTRACE(1)   3            : [addr=<0x2aaaad0a5cdd>] [/lib64/libc-2.12.so:0] [/lib64/libc-2.12.so]
BACKTRACE(1)   4            : [addr=<0x4006f9>] [/proc/self/exe:0] [/g/g24/shende1/workshop/debug/foo]
CPU Cores                   : 6
CPU MHz                     : 2801.000
CPU Type                    : Intel(R) Xeon(R) CPU X5660 @ 2.80GHz
CPU Vendor                  : GenuineIntel
CWD                         : /g/g24/shende1/workshop/debug
Cache Size                  : 12288 KB
Command Line                : ./foo
Executable                  : /g/g24/shende1/workshop/debug/foo
File Type Index             : 1
File Type Name              : TAU profiles
Hostname                    : edge14
Local Time                  : 2014-01-22T07:20:53-08:00
MPI Processor Name          : edge14
Memory Size                 : 98933136 kB
Node Name                   : edge14
OS Machine                  : x86_64
OS Name                     : Linux
OS Release                  : 2.6.32-358.14.1.3chaos.ch5.1.1.x86_64
OS Version                  : #1 SMP Mon Oct 7 13:06:43 PDT 2013
SIGNAL                      : Segmentation fault
Starting Timestamp          : 1390404053035037
TAU Architecture            : default
TAU Config                  : -pdt=/usr/global/tools/tau/training//pdt_latest -bfd=download -papi=/usr/global/tools/tau/training/papi-5.
0.1 -mpi -mpiinc=/usr/local/tools/mvapich-gnu/include -mpilib=/usr/local/tools/mvapich-gnu/lib/shared -mpilibrary=-lmpich#-libverbs#-lpt
hread#-libumad -useropt=-DTAU_MPI_F_STATUSES_IGNORE_ABSENT -iowrapper



see the output. 

This uses runtime preloading of the TAU library to instrument the application.
You may also uncomment #CC= ...tau_cc.sh in the Makefile (and comment CC=mpicc -g) to use TAU to compile the code and then you may use the normal mpirun command to run the instrumented code to generate the backtrace. 

% export TAU_TRACK_SIGNALS=1
% mpiexec ./foo
% paraprof

to view the results in either case.

