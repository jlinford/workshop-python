#------------------------- BEGIN small_main.py BEGIN -------------------------
# @file small_main.py                                                         
# @author jlinford                                                            
# @date 2015-04-15 21:17:47.410257                                            
# @brief Python language driver with restarts                                 
#                                                                             
# Python language driver with restarts                                        
#                                                                             
# This file was generated by Kppa: http://www.paratools.com/Kppa              
#-----------------------------------------------------------------------------
import numpy as np
import sys
from small_parameters import *
from small_integrate import *
from small_initialize import *
from small_driver_parameters import *
from small_monitor import *



#----------------------------------------------------------------------------
# Lookat data                                                                
#----------------------------------------------------------------------------

lookatFile = None


#---------------------------------- Monitor ----------------------------------
# Reports on species concentrations as they are calculated                    
#                                                                             
# @param[in]     time Integration time                                        
# @param[in]     step Last accepted integrator time step (H)                  
# @param[in]     err  Error in solution vector                                
# @param[in]     conc Species concentrations                                  
#-----------------------------------------------------------------------------
def Monitor(time, step, err, conc):

  i = 0
  cspc = np.zeros(NMONITOR, dtype=np.float32)

  cspc[0] = conc[0] / CFACTOR
  cspc[1] = conc[1] / CFACTOR
  cspc[2] = conc[2] / CFACTOR
  cspc[3] = conc[3] / CFACTOR
  cspc[4] = conc[4] / CFACTOR
  cspc[5] = conc[6] / CFACTOR

  sys.stdout.write("%5.1f%% | %9.2f | %9.3e | %9.3e " %
         (((time-TSTART)/abs(TEND-TSTART))*100.0, 
         time, step, err))
  for i in range(0,NMONITOR):
    sys.stdout.write("| %11.4e " %  cspc[i])
    
  sys.stdout.write("\n")
  sys.stdout.flush()
# END Monitor




#-------------------------------- InitMonitor --------------------------------
# Initializes the species monitor                                             
#                                                                             
# @param[in]     time Integration time                                        
# @param[in]     step Last accepted integrator time step (H)                  
# @param[in]     conc Species concentrations                                  
#-----------------------------------------------------------------------------
def InitMonitor(time, step, conc):
  sys.stdout.write("\n                                    KPPA: ROSENBROCK TIME INTEGRATION OF CHEMICAL SPECIES                                     \n")
  sys.stdout.write("------------------------------------------------------------------------------------------------------------------------------\n")
  sys.stdout.write("       |     T     |     H     | Err. Norm |     O1D     |      O      |     O3      |     NO      |     NO2     |     O2     \n")
  Monitor(time, step, 0.0, conc)

# END InitMonitor




#----------------------------------- LookAt ----------------------------------
# Writes species concentrations to file                                       
#                                                                             
# @param[in]     time Integration time                                        
# @param[in]     step Last accepted integrator time step (H)                  
# @param[in]     err  Error in solution vector                                
# @param[in]     conc Species concentrations                                  
#-----------------------------------------------------------------------------
def LookAt(time, step, err, conc):
  data = np.zeros(3 + NLOOKAT, dtype=np.float32)

  if lookatFile:
    data[0] = time
    data[1] = step
    data[2] = err
    data[3] = conc[2] / CFACTOR
    data[4] = conc[4] / CFACTOR
    lookatFile.write(data)
    
# END LookAt




#------------------------------------ main -----------------------------------
# Program driver routine                                                      
#                                                                             
#-----------------------------------------------------------------------------
def main():
  # Integration status code 
  retval = None
  # Integration status code per timestep iteration 
  tsretval = None
  # Integration time 
  time = None

  # Absolute integration tolerances for variable species 
  abstol = np.zeros((5), dtype=np.float32)
  # Relative integration tolerances for variable species 
  reltol = np.zeros((5), dtype=np.float32)

  # Integer integration in/out parameters 
  idata = np.zeros((20), dtype=np.int32)
  # Real value integration in/out parameters 
  rdata = np.zeros((20), dtype=np.float32)
  # Last timestamp in each grid cell 
  lastH = np.zeros((NCELLS), dtype=np.float32)

   
  # Integrator statistics 
  nFun = 0       # Number of function evaluations  (int)
  nJac = 0       # Number of Jacobian evaluations  (int)
  nStp = 0       # Number of solver steps  (int)
  nAcc = 0       # Number of accepted steps  (int)
  nRej = 0       # Number of rejected steps  (int)
  nDec = 0       # Number of matrix decompositions  (int)
  nSol = 0       # Number of Ax=b solves  (int)
  nSng = 0       # Number of singular decomposition results  (int)

  # Working variables 
  i = 0
    
  sys.stdout.write("Kppa: Integrating %ld grid cells, time interval [%g, %g]\n" %
          (NCELLS, TSTART, TEND))

  # Initialize example grid data 
  # Species concentrations for all grid cells  
  conc = np.zeros(NSPEC*NCELLS, dtype=np.float32)
  for i in range(0,NCELLS):
    start_ind = i * NSPEC
    Initialize(conc[start_ind:],conc[start_ind+NVAR:])  

  # Set time interval 
  time = TSTART
    
  # Initialize vector tolerances 
  abstol.fill(ATOLS)
  reltol.fill(RTOLS)

  # Initialize integration parameters to 0 = use defaults 
  idata.fill(0.0)
  rdata.fill(0.0)

  # Rosenbrock default parameters 
  idata[0] = 0       # System is non-autonomous: F = F(t,y) 
  idata[1] = 0       # Use vector tolerances 
  idata[2] = 100000  # Maximum number of integration steps 
  idata[3] = 5       # Rodas4 Rosenbrock method 
  idata[4] = 0       # Tolerance vectors will not be checked 

  rdata[0] = 0       # Integration step size lower bound: 0 recommended 
  rdata[1] = 0       # Integration step size upper bound: 0 recommended 
  rdata[2] = TDEL # Starting integration step size 
  rdata[3] = 0.2     # Lower bound on step decrease factor 
  rdata[4] = 6       # Upper bound on step increase factor 
  rdata[5] = 0.1     # Step decrease factor after step rejection 
  rdata[6] = 0.9     # Safety factor in the computation of new step size 
    
  # Initialize LookAt file 
  fname = "small.dat"
  try:
    lookatFile = open(fname,"w")
  except:
    sys.stdout.write("ERROR: Cannot create file: %s\n" % fname)
    return 1

  # Initialize species monitor 
  InitMonitor(time, rdata[2], conc)

  
  # Perform time integration 
  retval = 0
  while time < TEND:
    tsretval = GridIntegrate(NCELLS, conc, time, time + TDEL, 
                                abstol, reltol, idata, rdata, lastH)

    # Accumulate statistics 
    nStp += idata[12]
    nAcc += idata[13]
    nRej += idata[14]
    nSng += idata[17] 
    nFun += idata[10]
    nJac += idata[11]
    nDec += idata[15]
    nSol += idata[16]

    # Update time 
    time = rdata[10]

    # Write species concentrations to file 
    LookAt(time, rdata[11], rdata[12], conc)

        
    # Report species concentrations to stdout 
    Monitor(time, rdata[11], rdata[12], conc)

        
    # Process return code 
    if tsretval < 0:
      # Error occured: save code and abort 
      if retval > tsretval:
        retval = tsretval
        break
      elif tsretval > 0:
        # Warning occured: save code and continue 
        if retval >= 0 and retval < tsretval:
          retval = tsretval
            

    # Use last integration step size as the starting step size 
    rdata[2] = rdata[11]
    
    # end while

  # Report status 
  if retval < 0:
    sys.stdout.write("Kppa: GRID INTEGRATION FAILED\n")
  elif retval > 0:
    sys.stdout.write("Kppa: GRID INTEGRATION SUCCEEDED WITH WARNINGS\n")
  else:
    sys.stdout.write("Kppa: GRID INTEGRATION SUCCEEDED\n")
    
  sys.stdout.write("Kppa: Stp=%d, Acc=%d, Rej=%d, Sng=%d, Fun=%d, Jac=%d, Dec=%d, Sol=%d\n" %
                   (nStp, nAcc, nRej, nSng, nFun, nJac, nDec, nSol))

  sys.stdout.flush()
  # Clean up and exit 
  if lookatFile:
    lookatFile.flush()
    lookatFile.close()
 

  return retval

# END main



if __name__ == "__main__":
  main()



#--------------------------- END small_main.py END ---------------------------
