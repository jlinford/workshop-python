#----------------------- BEGIN small_integrate.py BEGIN ----------------------
# @file small_integrate.py                                                    
# @author jlinford                                                            
# @date 2015-04-15 21:17:47.426026                                            
# @brief Interface to time stepping integrator                                
#                                                                             
# Definitions of interface functions for the Kppa-generated                   
# time stepping integrator.  These are the Kppa "entry point" routines.       
#                                                                             
# This file was generated by Kppa: http://www.paratools.com/Kppa              
#-----------------------------------------------------------------------------
import numpy as np
import sys
import ctypes as C
import numpy.ctypeslib as cnp
from small_parameters import *

_small = cnp.load_library('libsmall','.')



#------------------------------- GridIntegrate -------------------------------
# Applies the Kppa-generated integrator to the grid                           
#                                                                             
# @param[in]     ncells Number of grid cells                                  
# @param[in,out] conc   Species concentrations                                
# @param[in]     tstart Integration start time                                
# @param[in]     tend   Integration end time                                  
# @param[in]     abstol Absolute integration tolerances for variable species  
# @param[in]     reltol Relative integration tolerances for variable species  
# @param[in,out] idata  Integer integration in/out parameters                 
# @param[in,out] rdata  Real value integration in/out parameters              
# @param[out]    lastH  Last timestep in each grid cell                       
#-----------------------------------------------------------------------------

_small.GridIntegrate.restype = C.c_int
_small.GridIntegrate.argtypes = [
    C.c_int,
    cnp.ndpointer(dtype=C.c_float,flags='aligned,contiguous'),
    C.c_float,
    C.c_float,
    cnp.ndpointer(dtype=C.c_float, shape=(NVAR), flags='aligned,contiguous'),
    cnp.ndpointer(dtype=C.c_float, shape=(NVAR), flags='aligned,contiguous'),
    cnp.ndpointer(dtype=C.c_int, shape=(20), flags='aligned,contiguous'),
    cnp.ndpointer(dtype=C.c_float, shape=(20), flags='aligned,contiguous'),
    cnp.ndpointer(dtype=C.c_float,flags='aligned,contiguous'),
]

def GridIntegrate(ncells, conc, tstart, tend, abstol, reltol, idata, rdata,
    lastH):

  '''
    /* Return value */
    np.int32 retval = 0;
    /* Iterators */
    int i, j;
    /* Pointer to variable concentrations in grid cell */
    np.float32 * var;
    /* Pointer to fixed concentrations in grid cell */
    np.float32 * fix;

    #pragma omp parallel for \
                default(shared) \
                private(i,j,var,fix) \
                firstprivate(idata, rdata) \
                lastprivate(idata, rdata) \
                reduction(|:retval)
    for(i=0; i<ncells; ++i) {
        /* Get concentrations for the current grid cell */
        var = conc + i*NSPEC;
        fix = var + NVAR;

        /* Invoke the integrator */
        Integrate(var, fix, i, tstart, tend, abstol, reltol, idata, rdata);

        /* Save the last timestep for future use */
        if(lastH) {
            lastH[i] = rdata[11];
        }

        /* Process integrator return code */
        if (idata[19] < 0) {
            printf("Kppa: CELL %d -- INTEGRATION FAILED\n", i);
            #pragma omp critical
            {
                for(j=0; j<20; ++j)
                    printf("Kppa: CELL %d -- idata[%d] = %d\n", i, j, idata[j]);
                for(j=0; j<20; ++j)
                    printf("Kppa: CELL %d -- rdata[%d] = %g\n", i, j, rdata[j]);
            }
            if (idata[19] < retval)
                retval = idata[19];
        } else if (idata[19] > 0) {
            printf("Kppa: CELL %d -- INTEGRATION COMPLETED WITH WARNING\n", i);
            if (retval >= 0 && idata[19] > retval)
                retval = idata[19];
        }
    }
    
    return retval;
  '''
  # Call the C library function and return the result 
  _retval_GridIntegrate = _small.GridIntegrate(ncells, conc, tstart, tend,
      abstol, reltol, idata, rdata, lastH)
  return _retval_GridIntegrate
# END GridIntegrate



#------------------------- END small_integrate.py END ------------------------
