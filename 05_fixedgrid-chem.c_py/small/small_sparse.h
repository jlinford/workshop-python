/*------------------------- BEGIN small_sparse.h BEGIN ------------------------*/
/* @file small_sparse.h                                                        */
/* @author jlinford                                                            */
/* @date 2015-04-15 21:17:47.170876                                            */
/* @brief Data and utilities for row-compressed sparse matrices                */
/*                                                                             */
/* The following matrices are represented here in row-compressed form:         */
/* @li The Jacobian                                                            */
/* @li The LU decomposition of the Jacobian                                    */
/* @li The stoichiometric matrix                                               */
/*                                                                             */
/* This file was generated by Kppa: http://www.paratools.com/Kppa              */
/*-----------------------------------------------------------------------------*/

#ifndef __SMALL_SPARSE_H__
#define __SMALL_SPARSE_H__



#ifdef __cplusplus
extern "C" {
#endif


/* Number of nonzero entries in the Jacobian */
#define JAC_NZ           ((size_t)(19))


/* Number of nonzero entries in the LU decomposition of the Jacobian */
#define JAC_LU_NZ        ((size_t)(19))


/* Number of nonzero entries in the stoichiometric matrix */
#define STOICH_NZ        ((size_t)(34))


/* Number of nonzero entries in the left-side stoichiometric matrix */
#define LHS_STOICH_NZ    ((size_t)(20))


/* Number of nonzero entries in the right-side stoichiometric matrix */
#define RHS_STOICH_NZ    ((size_t)(16))


/* Row indices of elements in the row-compressed Jacobian */
extern int const  JAC_IROW[19];


/* Column indices of elements in the row-compressed Jacobian */
extern int const  JAC_ICOL[19];


/* Start-of-row indices in the row-compressed Jacobian */
extern int const  JAC_CROW[6];


/* Diagonal indices in the row-compressed Jacobian */
extern int const  JAC_DIAG[6];


/* Row indices of elements in the row-compressed LU decomposition of the Jacobian */
extern int const  JAC_LU_IROW[19];


/* Column indices of elements in the row-compressed LU decomposition of the Jacobian */
extern int const  JAC_LU_ICOL[19];


/* Start-of-row indices in the row-compressed LU decomposition of the Jacobian */
extern int const  JAC_LU_CROW[6];


/* Diagonal indices in the row-compressed LU decomposition of the Jacobian */
extern int const  JAC_LU_DIAG[6];


/* Row indices of elements in the row-compressed stoichiometric matrix */
extern int const  STOICH_IROW[34];


/* Column indices of elements in the row-compressed stoichiometric matrix */
extern int const  STOICH_ICOL[34];


/* Start-of-row indices in the row-compressed stoichiometric matrix */
extern int const  STOICH_CROW[9];


/* Stoichiometric coefficients */
extern float const  STOICH[34];


/* Row indices of elements in the row-compressed left-side stoichiometric matrix */
extern int const  LHS_STOICH_IROW[20];


/* Column indices of elements in the row-compressed left-side stoichiometric matrix */
extern int const  LHS_STOICH_ICOL[20];


/* Start-of-row indices in the row-compressed left-side stoichiometric matrix */
extern int const  LHS_STOICH_CROW[9];


/* Left-side stoichiometric coefficients */
extern float const  LHS_STOICH[20];


/* Row indices of elements in the row-compressed right-side stoichiometric matrix */
extern int const  RHS_STOICH_IROW[16];


/* Column indices of elements in the row-compressed right-side stoichiometric matrix */
extern int const  RHS_STOICH_ICOL[16];


/* Start-of-row indices in the row-compressed right-side stoichiometric matrix */
extern int const  RHS_STOICH_CROW[9];


/* Right-side stoichiometric coefficients */
extern float const  RHS_STOICH[16];


/*------------------------------------ CSR ------------------------------------*/
/* Retrieves an element from a compressed sparse row matrix                    */
/*                                                                             */
/* @param[in]     nz   Matrix nonzero values                                   */
/* @param[in]     crow Row start indices                                       */
/* @param[in]     icol Column indices                                          */
/* @param[in]     row  Row index into matrix                                   */
/* @param[in]     col  Column index into matrix                                */
/*-----------------------------------------------------------------------------*/
float CSR(float const * nz, int const * crow, int const * icol, int const
    row, int const col);



#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* __SMALL_SPARSE_H__ */
/*--------------------------- END small_sparse.h END --------------------------*/
